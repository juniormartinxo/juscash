#!/bin/bash

# Script de configura√ß√£o autom√°tica do Redis para o projeto JusCash
# Garante que o Redis funcione em qualquer ambiente

set -e  # Para execu√ß√£o em caso de erro

echo "üöÄ Configurando Redis para o projeto JusCash..."

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log colorido
log_info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }
log_success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
log_warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
log_error() { echo -e "${RED}‚ùå $1${NC}"; }

# Verificar se Docker est√° rodando
check_docker() {
    log_info "Verificando Docker..."
    if ! docker info > /dev/null 2>&1; then
        log_error "Docker n√£o est√° rodando. Por favor, inicie o Docker primeiro."
        exit 1
    fi
    log_success "Docker est√° rodando"
}

# Verificar se docker-compose existe
check_docker_compose() {
    log_info "Verificando Docker Compose..."
    if ! command -v docker-compose > /dev/null 2>&1; then
        log_error "Docker Compose n√£o encontrado. Por favor, instale o Docker Compose."
        exit 1
    fi
    log_success "Docker Compose encontrado"
}

# Criar diret√≥rios necess√°rios
create_directories() {
    log_info "Criando diret√≥rios necess√°rios..."
    
    directories=(
        "database/redis/redis-data"
        "database/redis/logs"
    )
    
    for dir in "${directories[@]}"; do
        if [ ! -d "$dir" ]; then
            mkdir -p "$dir"
            log_success "Diret√≥rio criado: $dir"
        else
            log_info "Diret√≥rio j√° existe: $dir"
        fi
    done
}

# Configurar permiss√µes
setup_permissions() {
    log_info "Configurando permiss√µes..."
    
    # ID do usu√°rio Redis no container Bitnami
    REDIS_UID=1001
    REDIS_GID=1001
    
    directories=(
        "database/redis/redis-data"
        "database/redis/logs"
    )
    
    for dir in "${directories[@]}"; do
        if [ -d "$dir" ]; then
            # Tentar com sudo se necess√°rio
            if ! chown -R $REDIS_UID:$REDIS_GID "$dir" 2>/dev/null; then
                log_warning "Permiss√µes requerem sudo para: $dir"
                if command -v sudo > /dev/null 2>&1; then
                    sudo chown -R $REDIS_UID:$REDIS_GID "$dir"
                    log_success "Permiss√µes configuradas com sudo: $dir"
                else
                    log_warning "Sudo n√£o dispon√≠vel. Tentando sem chown..."
                    chmod -R 755 "$dir" 2>/dev/null || true
                fi
            else
                log_success "Permiss√µes configuradas: $dir"
            fi
            
            # Garantir permiss√µes de escrita
            chmod -R 755 "$dir" 2>/dev/null || true
        fi
    done
}

# Verificar arquivos necess√°rios do Redis
check_redis_files() {
    log_info "Verificando arquivos do Redis..."
    
    # Verificar Dockerfile
    if [ ! -f "database/redis/.docker/Dockerfile" ] && [ ! -f "database/redis/Dockerfile" ]; then
        log_warning "Dockerfile do Redis n√£o encontrado. Criando..."
        
        mkdir -p database/redis/.docker
        
        cat > database/redis/.docker/Dockerfile << 'EOF'
FROM bitnami/redis:8.0.2

# Criar diret√≥rios necess√°rios e definir permiss√µes
USER root
RUN mkdir -p /var/log/redis /var/lib/redis/data && \
    chown -R 1001:1001 /var/log/redis /var/lib/redis && \
    chmod -R 755 /var/log/redis /var/lib/redis

# Voltar para o usu√°rio redis
USER 1001

EXPOSE ${REDIS_PORT}
EOF
        
        log_success "Dockerfile do Redis criado"
    else
        log_success "Dockerfile do Redis encontrado"
    fi
}

# Limpar containers e volumes antigos
cleanup_redis() {
    log_info "Limpando configura√ß√µes antigas do Redis..."
    
    # Parar container se estiver rodando
    docker-compose stop redis 2>/dev/null || true
    
    # Remover container
    docker rm -f juscash-redis 2>/dev/null || true
    
    # Limpar dados antigos se tiverem permiss√µes incorretas
    if [ -d "database/redis/redis-data" ]; then
        # Verificar se h√° arquivos com permiss√µes incorretas
        if find database/redis/redis-data -type f ! -user $USER 2>/dev/null | grep -q .; then
            log_warning "Encontrados arquivos com permiss√µes incorretas. Limpando..."
            if command -v sudo > /dev/null 2>&1; then
                sudo rm -rf database/redis/redis-data/*
            else
                rm -rf database/redis/redis-data/* 2>/dev/null || true
            fi
            log_success "Dados antigos removidos"
        fi
    fi
}

# Testar configura√ß√£o do Redis
test_redis() {
    log_info "Testando configura√ß√£o do Redis..."
    
    # Construir imagem
    log_info "Construindo imagem do Redis..."
    if ! docker-compose build redis; then
        log_error "Falha ao construir imagem do Redis"
        return 1
    fi
    
    # Iniciar Redis
    log_info "Iniciando Redis..."
    if ! docker-compose up -d redis; then
        log_error "Falha ao iniciar Redis"
        return 1
    fi
    
    # Aguardar inicializa√ß√£o
    log_info "Aguardando Redis inicializar..."
    sleep 10
    
    # Verificar se est√° rodando
    if ! docker-compose ps redis | grep -q "Up"; then
        log_error "Redis n√£o est√° rodando corretamente"
        log_info "Logs do Redis:"
        docker-compose logs redis
        return 1
    fi
    
    # Testar conectividade
    log_info "Testando conectividade..."
    REDIS_PASSWORD=$(grep REDIS_PASSWORD .env | cut -d'=' -f2 | tr -d "'\"")
    REDIS_PORT=$(grep REDIS_PORT .env | cut -d'=' -f2 | tr -d "'\"")
    
    if docker exec juscash-redis redis-cli -p "$REDIS_PORT" -a "$REDIS_PASSWORD" ping 2>/dev/null | grep -q "PONG"; then
        log_success "Redis respondendo ao ping"
        
        # Testar escrita/leitura
        if docker exec juscash-redis redis-cli -p "$REDIS_PORT" -a "$REDIS_PASSWORD" set test_setup "funcionando" >/dev/null 2>&1; then
            if [ "$(docker exec juscash-redis redis-cli -p "$REDIS_PORT" -a "$REDIS_PASSWORD" get test_setup 2>/dev/null)" = "funcionando" ]; then
                log_success "Teste de escrita/leitura OK"
                
                # Testar persist√™ncia
                if docker exec juscash-redis redis-cli -p "$REDIS_PORT" -a "$REDIS_PASSWORD" bgsave >/dev/null 2>&1; then
                    log_success "Teste de persist√™ncia OK"
                    
                    # Limpeza do teste
                    docker exec juscash-redis redis-cli -p "$REDIS_PORT" -a "$REDIS_PASSWORD" del test_setup >/dev/null 2>&1
                    
                    return 0
                else
                    log_error "Falha no teste de persist√™ncia"
                    return 1
                fi
            else
                log_error "Falha no teste de leitura"
                return 1
            fi
        else
            log_error "Falha no teste de escrita"
            return 1
        fi
    else
        log_error "Redis n√£o responde ao ping"
        return 1
    fi
}

# Menu principal
main() {
    echo "üîß Setup Redis - JusCash Project"
    echo "================================"
    
    check_docker
    check_docker_compose
    create_directories
    setup_permissions
    check_redis_files
    cleanup_redis
    
    if test_redis; then
        echo ""
        log_success "üéâ Redis configurado com sucesso!"
        log_info "Redis est√° rodando em: localhost:6383"
        log_info "Para parar: docker-compose stop redis"
        log_info "Para ver logs: docker-compose logs redis"
        echo ""
    else
        echo ""
        log_error "‚ùå Falha na configura√ß√£o do Redis"
        log_info "Execute 'docker-compose logs redis' para mais detalhes"
        echo ""
        exit 1
    fi
}

# Executar se chamado diretamente
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi