generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * A tabela User representa todos os usuários que têm acesso ao sistema,
 * incluindo funcionários das organizações clientes e administradores da plataforma.
 * É a entidade central de autenticação e autorização.
 */
model User {
  id                    String    @id @default(cuid(2)) // ID do usuário
  name                  String // Nome do usuário
  email                 String    @unique // Email do usuário
  password_hash         String    @map("password_hash") // Hash da senha
  last_password_change  DateTime? @default(now())
  is_password_temporary Boolean?  @default(true)
  is_active             Boolean   @default(true)
  created_at            DateTime  @default(now()) @map("created_at") // Data de criação
  updated_at            DateTime  @updatedAt @map("updated_at") // Data de atualização
  deactivated_at        DateTime? @map("deactivated_at")

  UserRefreshToken UserRefreshToken[]
  UserSession      UserSession[]
  AuthLog          AuthLog[]
  PublicationLog   PublicationLog[]

  @@index([email]) // Índice para o email
  @@index([created_at]) // Índice para a data de criação
  @@map("users")
}

/**
 * UserRefreshToken armazena cada refresh token gerado para um usuário autenticado.
 * Ele permite que o sistema valide e gerencie a renovação de tokens de acesso (access tokens),
 * oferecendo uma camada adicional de segurança e controle de sessões.
 */
model UserRefreshToken {
  id         String   @id @default(cuid(2))
  User       User     @relation(fields: [user_id], references: [id])
  user_id    String
  token      String   @unique
  expires_at DateTime
  device     String?
  ip         String?
  revoked    Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("user_refresh_tokens")
}

/**
 * UserSession registra cada sessão iniciada por um usuário. Isso permite que o sistema tenha
 * controle sobre os acessos realizados e possibilita, se necessário, encerrar sessões ativas
 * manualmente, por exemplo, em casos de segurança.
 */
model UserSession {
  id                String    @id @default(cuid(2))
  User              User      @relation(fields: [user_id], references: [id])
  user_id           String
  refresh_token     String    @unique
  token_expires_at  DateTime
  device_type       String // ex: "mobile", "desktop", "tablet"
  device_name       String? // ex: "iPhone 13", "Chrome em Windows"
  device_identifier String? // fingerprint do dispositivo
  ip_address        String?
  user_agent        String?
  is_active         Boolean   @default(true)
  last_activity     DateTime  @default(now())
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  revoked_at        DateTime?
  revoked_by_user   Boolean?  @default(false)

  @@index([user_id, is_active])
  @@map("user_sessions")
}

/**
 * AuthLog registra cada tentativa de autenticação, seja ela bem-sucedida ou falha. Isso permite monitorar e
 * auditar acessos ao sistema, detectar padrões de ataques, monitorar tentativas suspeitas e oferecer
 * relatórios completos de segurança.
 */
model AuthLog {
  id             String         @id @default(cuid(2))
  ip_address     String?
  user_agent     String?
  email          String // Email usado na tentativa
  user_id        String? // Pode ser null se o usuário não existe
  User           User?          @relation(fields: [user_id], references: [id])
  action         EAuthLogAction
  status         EAuthLogStatus
  failure_reason String? // Razão da falha (se houver)
  device_info    Json? // Informações adicionais do dispositivo
  location_info  Json? // Informações de geolocalização baseadas no IP
  session_id     String? // ID da sessão criada (se login bem-sucedido)
  created_at     DateTime       @default(now())

  @@index([user_id, created_at])
  @@index([email, created_at])
  @@map("auth_logs")
}

/**
 * A tabela Publication representa cada publicação de processo judicial.
 * Ela armazena informações detalhadas sobre o processo, como número, data de publicação,
 * data de disponibilidade, autores, réu, valor bruto, valor líquido, valor do juros, valor dos honorários,
 * conteúdo da publicação e status.
 */
model Publication {
  id                String            @id @default(cuid(2))
  process_number    String            @unique @map("process_number") // Número do processo
  publication_date  DateTime?         @map("publication_date") @db.Date // Data de publicação
  availability_date DateTime          @map("availability_date") @db.Date // Data de disponibilidade
  authors           String[] // Array de autores
  defendant         String            @default("Instituto Nacional do Seguro Social - INSS") // Réu
  lawyers           Json? // JSON: [{"name": "João", "oab": "123456"}]
  gross_value       Int?              @map("gross_value") // Valor bruto em centavos (100000 = R$ 1000,00)
  net_value         Int?              @map("net_value") // Valor líquido em centavos (100000 = R$ 1000,00)
  interest_value    Int?              @map("interest_value") // Valor do juros em centavos (100000 = R$ 1000,00)
  attorney_fees     Int?              @map("attorney_fees") // Valor dos honorários em centavos (100000 = R$ 1000,00)
  content           String            @db.Text // Conteúdo da publicação
  status            PublicationStatus @default(NOVA) // Status da publicação
  created_at        DateTime          @default(now()) @map("created_at") // Data de criação
  updated_at        DateTime          @updatedAt @map("updated_at") // Data de atualização
  PublicationLog    PublicationLog[]

  @@index([process_number]) // Índice para o número do processo
  @@index([status]) // Índice para o status
  @@index([availability_date]) // Índice para a data de disponibilidade
  @@index([created_at]) // Índice para a data de criação
  @@index([status, availability_date]) // Índice para o status e a data de disponibilidade
  @@index([availability_date, created_at]) // Índice para a data de disponibilidade e a data de criação
  @@map("publications")
}

/**
 * A tabela PublicationLog registra cada ação realizada na publicação, como criação, atualização, exclusão,
 * visualização e download. Isso permite rastrear todas as alterações feitas na publicação e fornecer
 * um histórico completo de suas atividades.
 */
model PublicationLog {
  id             String                @id @default(cuid(2))
  publication_id String
  publication    Publication           @relation(fields: [publication_id], references: [id])
  user_id        String
  user           User                  @relation(fields: [user_id], references: [id])
  action         EPublicationLogAction
  old_data       Json? // Dados antigos
  new_data       Json? // Dados novos
  created_at     DateTime              @default(now()) @map("created_at") // Data de criação

  @@map("publication_logs")
}

enum EPublicationLogAction {
  CRIADA
  ATUALIZADA
  DELETADA
  VISUALIZADA
  DOWNLOADED

  @@map("publication_log_action")
}

enum PublicationStatus {
  NOVA
  LIDA
  PROCESSADA

  @@map("publication_status")
}

enum EAuthLogAction {
  LOGIN
  LOGOUT
  PASSWORD_RESET_REQUEST
  PASSWORD_RESET_CONFIRM
  PASSWORD_CHANGE
  REFRESH_TOKEN
  ACCOUNT_LOCK
  FAILED_ATTEMPT

  @@map("auth_log_action")
}

enum EAuthLogStatus {
  SUCCESS
  FAILURE
  SUSPICIOUS
  BLOCKED

  @@map("auth_log_status")
}
