generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// *
///  * A tabela User representa todos os usuários que têm acesso ao sistema,
///  * incluindo funcionários das organizações clientes e administradores da plataforma.
///  * É a entidade central de autenticação e autorização.
model User {
  id                    String             @id @default(cuid(2))
  name                  String
  email                 String             @unique
  password_hash         String             @map("password_hash")
  last_password_change  DateTime?          @default(now())
  is_password_temporary Boolean?           @default(true)
  is_active             Boolean            @default(true)
  created_at            DateTime           @default(now()) @map("created_at")
  updated_at            DateTime           @updatedAt @map("updated_at")
  deactivated_at        DateTime?          @map("deactivated_at")
  AuthLog               AuthLog[]
  PublicationLog        PublicationLog[]
  UserRefreshToken      UserRefreshToken[]
  UserSession           UserSession[]

  @@index([email])
  @@index([created_at])
  @@map("users")
}

/// *
///  * UserRefreshToken armazena cada refresh token gerado para um usuário autenticado.
///  * Ele permite que o sistema valide e gerencie a renovação de tokens de acesso (access tokens),
///  * oferecendo uma camada adicional de segurança e controle de sessões.
model UserRefreshToken {
  id         String   @id @default(cuid(2))
  user_id    String
  token      String   @unique
  expires_at DateTime
  device     String?
  ip         String?
  revoked    Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  User       User     @relation(fields: [user_id], references: [id])

  @@map("user_refresh_tokens")
}

/// *
///  * UserSession registra cada sessão iniciada por um usuário. Isso permite que o sistema tenha
///  * controle sobre os acessos realizados e possibilita, se necessário, encerrar sessões ativas
///  * manualmente, por exemplo, em casos de segurança.
model UserSession {
  id                String    @id @default(cuid(2))
  user_id           String
  refresh_token     String    @unique
  token_expires_at  DateTime
  device_type       String
  device_name       String?
  device_identifier String?
  ip_address        String?
  user_agent        String?
  is_active         Boolean   @default(true)
  last_activity     DateTime  @default(now())
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  revoked_at        DateTime?
  revoked_by_user   Boolean?  @default(false)
  User              User      @relation(fields: [user_id], references: [id])

  @@index([user_id, is_active])
  @@map("user_sessions")
}

/// *
///  * AuthLog registra cada tentativa de autenticação, seja ela bem-sucedida ou falha. Isso permite monitorar e
///  * auditar acessos ao sistema, detectar padrões de ataques, monitorar tentativas suspeitas e oferecer
///  * relatórios completos de segurança.
model AuthLog {
  id             String         @id @default(cuid(2))
  ip_address     String?
  user_agent     String?
  email          String
  user_id        String?
  action         EAuthLogAction
  status         EAuthLogStatus
  failure_reason String?
  device_info    Json?
  location_info  Json?
  session_id     String?
  created_at     DateTime       @default(now())
  User           User?          @relation(fields: [user_id], references: [id])

  @@index([user_id, created_at])
  @@index([email, created_at])
  @@map("auth_logs")
}

/// *
///  * A tabela Publication representa cada publicação de processo judicial.
///  * Ela armazena informações detalhadas sobre o processo, como número, data de publicação,
///  * data de disponibilidade, autores, réu, valor bruto, valor líquido, valor do juros, valor dos honorários,
///  * conteúdo da publicação e status.
model Publication {
  id                    String             @id @default(cuid(2))
  process_number        String             @unique @map("process_number")
  publication_date      DateTime?          @map("publication_date") @db.Date
  availability_date     DateTime           @map("availability_date") @db.Date
  authors               String[]
  defendant             String             @default("Instituto Nacional do Seguro Social - INSS")
  lawyers               Json?
  gross_value           Int?               @map("gross_value")
  net_value             Int?               @map("net_value")
  interest_value        Int?               @map("interest_value")
  attorney_fees         Int?               @map("attorney_fees")
  content               String
  status                PublicationStatus  @default(NOVA)
  created_at            DateTime           @default(now()) @map("created_at")
  updated_at            DateTime           @updatedAt @map("updated_at")
  scraping_source       String             @default("DJE-SP") @map("scraping_source")
  caderno               String             @default("3")
  instancia             String             @default("1") @map("instancia")
  local                 String             @default("Capital")
  parte                 String             @default("1")
  extraction_metadata   Json?              @map("extraction_metadata")
  scraping_execution_id String?            @map("scraping_execution_id")
  PublicationLog        PublicationLog[]
  ScrapingExecution     ScrapingExecution? @relation(fields: [scraping_execution_id], references: [id])

  @@index([process_number])
  @@index([status])
  @@index([availability_date])
  @@index([created_at])
  @@index([status, availability_date])
  @@index([availability_date, created_at])
  @@index([scraping_source, caderno])
  @@index([defendant])
  @@map("publications")
}

/// *
///  * A tabela PublicationLog registra cada ação realizada na publicação através da interface web,
///  * como visualização, mudança de status, etc. Complementa o sistema de scraping com auditoria
///  * das interações dos usuários.
model PublicationLog {
  id             String                @id @default(cuid(2))
  publication_id String
  user_id        String
  action         EPublicationLogAction
  old_data       Json?
  new_data       Json?
  notes          String?
  created_at     DateTime              @default(now()) @map("created_at")
  publication    Publication           @relation(fields: [publication_id], references: [id])
  user           User                  @relation(fields: [user_id], references: [id])

  @@index([publication_id, created_at])
  @@index([user_id, created_at])
  @@index([action, created_at])
  @@map("publication_logs")
}

/// *
///  * A tabela ScrapingExecution registra cada execução do sistema de scraping Python,
///  * permitindo rastrear estatísticas, performance e resultados de cada execução
///  * automática ou manual do processo.
model ScrapingExecution {
  id                      String                   @id @default(uuid())
  execution_type          EScrapingExecutionType   @map("execution_type")
  status                  EScrapingExecutionStatus @default(RUNNING)
  started_at              DateTime                 @default(now()) @map("started_at")
  finished_at             DateTime?                @map("finished_at")
  execution_time_seconds  Int?                     @map("execution_time_seconds")
  publications_found      Int                      @default(0) @map("publications_found")
  publications_new        Int                      @default(0) @map("publications_new")
  publications_duplicated Int                      @default(0) @map("publications_duplicated")
  publications_failed     Int                      @default(0) @map("publications_failed")
  publications_saved      Int                      @default(0) @map("publications_saved")
  criteria_used           Json?                    @map("criteria_used")
  max_publications_limit  Int?                     @map("max_publications_limit")
  scraper_version         String?                  @map("scraper_version")
  browser_user_agent      String?                  @map("browser_user_agent")
  error_details           Json?                    @map("error_details")
  Publications            Publication[]

  @@index([execution_type, started_at])
  @@index([status, started_at])
  @@index([started_at])
  @@map("scraping_executions")
}

/// *
///  * A tabela ScrapingLog registra logs detalhados do processo de scraping,
///  * complementando os logs de arquivo com persistência em banco para
///  * análise e monitoramento via interface web.
model ScrapingLog {
  id                    String            @id @default(uuid())
  scraping_execution_id String?           @map("scraping_execution_id")
  level                 EScrapingLogLevel @default(INFO)
  message               String
  context               Json?
  error_stack           String?           @map("error_stack")
  created_at            DateTime          @default(now()) @map("created_at")

  @@index([scraping_execution_id, created_at])
  @@index([level, created_at])
  @@index([created_at])
  @@map("scraping_logs")
}

/// *
///  * A tabela ScrapingConfiguration permite armazenar configurações dinâmicas
///  * do sistema de scraping, permitindo ajustes sem necessidade de redeploy.
model ScrapingConfiguration {
  id          String   @id @default(cuid(2))
  key         String   @unique
  value       String
  description String?
  is_active   Boolean  @default(true) @map("is_active")
  created_at  DateTime @default(now()) @map("created_at")
  updated_at  DateTime @updatedAt @map("updated_at")

  @@index([key, is_active])
  @@map("scraping_configurations")
}

enum EPublicationLogAction {
  CRIADA
  ATUALIZADA
  VISUALIZADA
  STATUS_CHANGED
  MOVED_TO_COLUMN
  EXPORTED

  @@map("publication_log_action")
}

enum PublicationStatus {
  NOVA
  LIDA
  ENVIADA_PARA_ADV
  CONCLUIDA

  @@map("publication_status")
}

enum EScrapingExecutionType {
  SCHEDULED
  MANUAL
  TEST
  RETRY

  @@map("scraping_execution_type")
}

enum EScrapingExecutionStatus {
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
  TIMEOUT

  @@map("scraping_execution_status")
}

enum EScrapingLogLevel {
  DEBUG
  INFO
  WARNING
  ERROR
  CRITICAL

  @@map("scraping_log_level")
}

enum EAuthLogAction {
  LOGIN
  LOGOUT
  PASSWORD_RESET_REQUEST
  PASSWORD_RESET_CONFIRM
  PASSWORD_CHANGE
  REFRESH_TOKEN
  ACCOUNT_LOCK
  FAILED_ATTEMPT

  @@map("auth_log_action")
}

enum EAuthLogStatus {
  SUCCESS
  FAILURE
  SUSPICIOUS
  BLOCKED

  @@map("auth_log_status")
}
