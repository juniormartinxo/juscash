"""
Use Case - Salvamento de publica√ß√µes
"""

from typing import List, Dict
from domain.ports.scraping_repository import ScrapingRepositoryPort
from domain.entities.publication import Publication
from infrastructure.logging.logger import setup_logger

logger = setup_logger(__name__)


class SavePublicationsUseCase:
    """
    Use case respons√°vel pelo salvamento de publica√ß√µes via API
    """

    def __init__(self, repository: ScrapingRepositoryPort):
        self.repository = repository

    async def execute(self, publications: List[Publication]) -> Dict[str, int]:
        """
        Salva as publica√ß√µes via API

        Args:
            publications: Lista de publica√ß√µes para salvar

        Returns:
            Dict com estat√≠sticas de salvamento
        """
        logger.info(f"üíæ Iniciando salvamento de {len(publications)} publica√ß√µes")

        stats = {"total": len(publications), "saved": 0, "duplicated": 0, "failed": 0}

        for publication in publications:
            try:
                # Verificar se j√° existe
                exists = await self.repository.check_publication_exists(
                    publication.process_number
                )

                if exists:
                    logger.debug(
                        f"üìÑ Publica√ß√£o j√° existe: {publication.process_number}"
                    )
                    stats["duplicated"] += 1
                    continue

                # Salvar nova publica√ß√£o
                success = await self.repository.save_publication(publication)

                if success:
                    logger.debug(f"‚úÖ Publica√ß√£o salva: {publication.process_number}")
                    stats["saved"] += 1
                else:
                    logger.warning(f"‚ö†Ô∏è  Falha ao salvar: {publication.process_number}")
                    stats["failed"] += 1

            except Exception as error:
                logger.error(f"‚ùå Erro ao salvar {publication.process_number}: {error}")
                stats["failed"] += 1

        logger.info(f"üìä Salvamento conclu√≠do: {stats}")
        return stats
