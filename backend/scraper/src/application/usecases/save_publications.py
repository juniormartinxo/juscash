"""
Use Case - Salvamento de publica√ß√µes via fila Redis
"""

from typing import List, Dict
from domain.entities.publication import Publication
from infrastructure.queue.redis_queue_adapter import RedisQueueAdapter
from infrastructure.logging.logger import setup_logger

logger = setup_logger(__name__)


class SavePublicationsUseCase:
    """
    Use case respons√°vel pelo enfileiramento de publica√ß√µes para processamento ass√≠ncrono
    """

    def __init__(self):
        self.queue = RedisQueueAdapter()

    async def execute(self, publications: List[Publication]) -> Dict[str, int]:
        """
        Enfileira publica√ß√µes para processamento ass√≠ncrono via Redis

        Args:
            publications: Lista de publica√ß√µes para enfileirar

        Returns:
            Dict com estat√≠sticas de enfileiramento
        """
        logger.info(f"üìù Iniciando enfileiramento de {len(publications)} publica√ß√µes")

        if not publications:
            logger.warning("üìù Nenhuma publica√ß√£o para enfileirar")
            return {"total": 0, "enqueued": 0, "failed": 0}

        try:
            # Enfileirar todas as publica√ß√µes
            enqueued_count = await self.queue.enqueue_publications(publications)
            failed_count = len(publications) - enqueued_count

            stats = {
                "total": len(publications),
                "enqueued": enqueued_count,
                "failed": failed_count,
            }

            logger.info(f"üìä Enfileiramento conclu√≠do: {stats}")

            # Obter estat√≠sticas da fila
            queue_stats = self.queue.get_queue_stats()
            logger.info(
                f"üìà Estado da fila: {queue_stats['total_pending']} publica√ß√µes pendentes"
            )

            return stats

        except Exception as error:
            logger.error(f"‚ùå Erro durante enfileiramento: {error}")

            # Retornar estat√≠sticas de falha
            return {
                "total": len(publications),
                "enqueued": 0,
                "failed": len(publications),
            }

    def get_queue_stats(self) -> Dict[str, int]:
        """
        Obt√©m estat√≠sticas da fila Redis

        Returns:
            Estat√≠sticas da fila
        """
        try:
            return self.queue.get_queue_stats()
        except Exception as error:
            logger.error(f"‚ùå Erro ao obter estat√≠sticas da fila: {error}")
            return {"queue_size": 0, "delayed_queue_size": 0, "total_pending": 0}

    def clear_queue_if_development(self):
        """
        Limpa a fila apenas em ambiente de desenvolvimento
        """
        from infrastructure.config.settings import get_settings

        settings = get_settings()
        if settings.environment == "development":
            logger.warning("üßπ Limpando fila Redis (ambiente de desenvolvimento)")
            self.queue.clear_queue()
        else:
            logger.warning("‚ö†Ô∏è  Limpeza de fila n√£o permitida em produ√ß√£o")
