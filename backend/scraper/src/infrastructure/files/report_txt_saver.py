"""
M√≥dulo para salvar relat√≥rios extra√≠dos como arquivos TXT
"""

import os
import asyncio
from datetime import datetime, timedelta
from pathlib import Path
from typing import Optional, Dict, Any

from domain.entities.publication import Publication
from infrastructure.config.report_settings import get_report_settings
from infrastructure.logging.logger import setup_logger

logger = setup_logger(__name__)


class ReportTxtSaver:
    """
    Classe respons√°vel por salvar relat√≥rios extra√≠dos como arquivos TXT
    """

    def __init__(self, output_dir: str = None):
        """
        Inicializa o salvador de relat√≥rios

        Args:
            output_dir: Diret√≥rio onde os relat√≥rios ser√£o salvos (opcional)
        """
        # Carregar configura√ß√µes
        self.settings = get_report_settings()

        # Usar diret√≥rio personalizado ou das configura√ß√µes
        dir_path = output_dir or self.settings.output_directory
        self.output_dir = Path(dir_path)
        self.output_dir.mkdir(parents=True, exist_ok=True)

        # Criar subdiret√≥rios por data se configurado
        if self.settings.organize_by_date:
            today = datetime.now().strftime(self.settings.date_format)
            self.daily_dir = self.output_dir / today
            self.daily_dir.mkdir(parents=True, exist_ok=True)
        else:
            self.daily_dir = self.output_dir

        logger.info(f"üìÅ Diret√≥rio de relat√≥rios: {self.output_dir}")
        logger.info(f"üìÖ Relat√≥rios do dia: {self.daily_dir}")
        logger.info(
            f"‚öôÔ∏è Salvamento {'habilitado' if self.settings.enabled else 'desabilitado'}"
        )

    async def save_publication_report(self, publication: Publication) -> Optional[str]:
        """
        Salva uma publica√ß√£o como arquivo TXT

        Args:
            publication: Publica√ß√£o a ser salva

        Returns:
            Caminho do arquivo salvo ou None se houve erro
        """
        # Verificar se o salvamento est√° habilitado
        if not self.settings.enabled:
            logger.debug(f"üö´ Salvamento de relat√≥rios desabilitado")
            return None

        try:
            # Gerar nome do arquivo
            timestamp = datetime.now().strftime("%H%M%S_%f")[:-3]  # HH:MM:SS_mmm
            safe_process_number = publication.process_number.replace("/", "_").replace(
                ".", "_"
            )
            filename = f"relatorio_{safe_process_number}_{timestamp}.txt"
            file_path = self.daily_dir / filename

            # Gerar conte√∫do do relat√≥rio
            report_content = await self._generate_report_content(publication)

            # Salvar arquivo
            async with asyncio.Lock():  # Evitar conflitos de escrita
                with open(file_path, "w", encoding="utf-8") as f:
                    f.write(report_content)

            logger.info(f"üíæ Relat√≥rio salvo: {filename}")
            return str(file_path)

        except Exception as error:
            logger.error(
                f"‚ùå Erro ao salvar relat√≥rio para {publication.process_number}: {error}"
            )
            return None

    async def _generate_report_content(self, publication: Publication) -> str:
        """
        Gera o conte√∫do do relat√≥rio em formato TXT

        Args:
            publication: Publica√ß√£o para gerar o relat√≥rio

        Returns:
            Conte√∫do do relat√≥rio formatado
        """
        try:
            # Cabe√ßalho
            report_lines = [
                "RELAT√ìRIO DE PUBLICA√á√ÉO EXTRA√çDA - DJE-SP",
                "=" * 80,
                f"Data de Extra√ß√£o: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}",
                f"Sistema: JusCash Scraper",
                "=" * 80,
                "",
            ]

            # Informa√ß√µes do processo
            report_lines.extend(
                [
                    "INFORMA√á√ïES DO PROCESSO",
                    "-" * 40,
                    f"N√∫mero do Processo: {publication.process_number}",
                    f"Data de Publica√ß√£o: {publication.publication_date.strftime('%d/%m/%Y') if publication.publication_date else 'N√£o informada'}",
                    f"Data de Disponibiliza√ß√£o: {publication.availability_date.strftime('%d/%m/%Y %H:%M:%S')}",
                    "",
                ]
            )

            # Partes do processo
            report_lines.extend(
                ["PARTES DO PROCESSO", "-" * 40, f"R√©u: {publication.defendant}", ""]
            )

            # Autores
            if publication.authors:
                report_lines.extend(
                    [
                        "AUTORES:",
                        *[f"  - {author}" for author in publication.authors],
                        "",
                    ]
                )

            # Advogados
            if publication.lawyers:
                report_lines.extend(
                    [
                        "ADVOGADOS:",
                        *[
                            f"  - {lawyer.name} (OAB: {lawyer.oab})"
                            for lawyer in publication.lawyers
                        ],
                        "",
                    ]
                )

            # Valores monet√°rios
            values_section = ["VALORES MONET√ÅRIOS", "-" * 40]
            has_values = False

            if publication.gross_value:
                values_section.append(
                    f"Valor Bruto: R$ {publication.gross_value.to_real():.2f}"
                )
                has_values = True

            if publication.net_value:
                values_section.append(
                    f"Valor L√≠quido: R$ {publication.net_value.to_real():.2f}"
                )
                has_values = True

            if publication.interest_value:
                values_section.append(
                    f"Juros: R$ {publication.interest_value.to_real():.2f}"
                )
                has_values = True

            if publication.attorney_fees:
                values_section.append(
                    f"Honor√°rios Advocat√≠cios: R$ {publication.attorney_fees.to_real():.2f}"
                )
                has_values = True

            if has_values:
                report_lines.extend(values_section)
                report_lines.append("")
            else:
                report_lines.extend(
                    [
                        "VALORES MONET√ÅRIOS",
                        "-" * 40,
                        "Nenhum valor monet√°rio identificado",
                        "",
                    ]
                )

            # Conte√∫do da publica√ß√£o
            report_lines.extend(
                [
                    "CONTE√öDO COMPLETO DA PUBLICA√á√ÉO",
                    "-" * 80,
                    (
                        publication.content
                        if publication.content
                        else "Conte√∫do n√£o dispon√≠vel"
                    ),
                    "",
                    "-" * 80,
                    "",
                ]
            )

            # Metadados de extra√ß√£o
            if publication.extraction_metadata:
                report_lines.extend(
                    [
                        "METADADOS DE EXTRA√á√ÉO",
                        "-" * 40,
                    ]
                )

                for key, value in publication.extraction_metadata.items():
                    if key == "extraction_date":
                        try:
                            # Tentar converter para datetime e formatar
                            dt = datetime.fromisoformat(value.replace("Z", "+00:00"))
                            formatted_value = dt.strftime("%d/%m/%Y %H:%M:%S")
                        except:
                            formatted_value = str(value)
                    else:
                        formatted_value = str(value)

                    report_lines.append(
                        f"{key.replace('_', ' ').title()}: {formatted_value}"
                    )

                report_lines.append("")

            # Informa√ß√µes do sistema
            report_lines.extend(
                [
                    "INFORMA√á√ïES DO SISTEMA",
                    "-" * 40,
                    f"Status: {publication.status}",
                    f"Fonte de Scraping: {publication.scraping_source}",
                    f"Caderno: {publication.caderno}",
                    f"Inst√¢ncia: {publication.instancia}",
                    f"Local: {publication.local}",
                    f"Parte: {publication.parte}",
                    "",
                ]
            )

            # Rodap√©
            report_lines.extend(
                [
                    "=" * 80,
                    f"Relat√≥rio gerado automaticamente pelo JusCash Scraper",
                    f"Arquivo: {datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                    "=" * 80,
                ]
            )

            return "\n".join(report_lines)

        except Exception as error:
            logger.error(f"‚ùå Erro ao gerar conte√∫do do relat√≥rio: {error}")
            return f"ERRO: N√£o foi poss√≠vel gerar o relat√≥rio para o processo {publication.process_number}\nErro: {error}"

    def get_daily_stats(self) -> Dict[str, Any]:
        """
        Obt√©m estat√≠sticas dos relat√≥rios salvos hoje

        Returns:
            Estat√≠sticas do dia
        """
        try:
            txt_files = list(self.daily_dir.glob("relatorio_*.txt"))

            return {
                "date": datetime.now().strftime("%Y-%m-%d"),
                "total_reports": len(txt_files),
                "directory": str(self.daily_dir),
                "files": [f.name for f in txt_files[-10:]],  # √öltimos 10 arquivos
            }
        except Exception as error:
            logger.error(f"‚ùå Erro ao obter estat√≠sticas: {error}")
            return {"error": str(error)}

    def cleanup_old_reports(self, days_to_keep: int = 30):
        """
        Remove relat√≥rios antigos

        Args:
            days_to_keep: N√∫mero de dias para manter os relat√≥rios
        """
        try:
            cutoff_date = datetime.now() - timedelta(days=days_to_keep)

            for date_dir in self.output_dir.iterdir():
                if date_dir.is_dir():
                    try:
                        dir_date = datetime.strptime(date_dir.name, "%Y-%m-%d")
                        if dir_date < cutoff_date:
                            # Remove o diret√≥rio e todos os arquivos
                            import shutil

                            shutil.rmtree(date_dir)
                            logger.info(f"üóëÔ∏è Diret√≥rio removido: {date_dir.name}")
                    except ValueError:
                        # N√£o √© um diret√≥rio de data v√°lido, pular
                        continue

        except Exception as error:
            logger.error(f"‚ùå Erro na limpeza de relat√≥rios antigos: {error}")
