#!/usr/bin/env python3
"""
Teste do Parser Aprimorado para Extra√ß√£o de Autores
Segue instru√ß√µes espec√≠ficas para padr√£o RPV/INSS
"""

import sys
import asyncio
from pathlib import Path

# Adicionar src ao path
sys.path.insert(0, str(Path(__file__).parent.parent))

from infrastructure.web.enhanced_content_parser import (
    EnhancedDJEContentParser,
    alert_edge_case,
)
from infrastructure.logging.logger import setup_logger

logger = setup_logger(__name__)

# Exemplo de conte√∫do de relat√≥rio DJE-SP para teste
SAMPLE_REPORT_CONTENT = """
Di√°rio da Justi√ßa Eletr√¥nico - Tribunal de Justi√ßa do Estado de S√£o Paulo
Caderno 3 - Judicial - 1¬™ Inst√¢ncia - Capital - Parte I
Data: 13/11/2024

Processo 0013168-70.2024.8.26.0053
Classe: Execu√ß√£o de T√≠tulo Judicial
Assunto: Acident√°rio
Requerente: MARIA DA SILVA
Requerido: INSTITUTO NACIONAL DO SEGURO SOCIAL - INSS
- MARIA DA SILVA - Vistos
Trata-se de execu√ß√£o de RPV contra o INSS no valor de R$ 15.000,00.
ADV. JO√ÉO DOS SANTOS (OAB 12345/SP)

Processo 0017901-21.2020.8.26.0053  
Classe: Execu√ß√£o de T√≠tulo Judicial
Assunto: Sa√∫de
Requerente: JOS√â OLIVEIRA
Requerido: INSTITUTO NACIONAL DO SEGURO SOCIAL - INSS
- JOS√â OLIVEIRA - Vistos
Execu√ß√£o para pagamento pelo INSS de benef√≠cio previdenci√°rio.
Valor principal: R$ 8.500,00
Honor√°rios advocat√≠cios: R$ 1.700,00
ADV. ANA COSTA (OAB 67890/SP)

Processo 0025432-15.2023.8.26.0053
Classe: A√ß√£o Ordin√°ria
Assunto: Aposentadoria
Requerente: PEDRO SANTOS
Requerido: INSTITUTO NACIONAL DO SEGURO SOCIAL - INSS
- PEDRO SANTOS - Vistos
A√ß√£o para concess√£o de aposentadoria por invalidez.
N√£o h√° men√ß√£o a RPV neste processo.
ADV. CARLOS LIMA (OAB 11111/SP)

Publica√ß√£o Oficial do Tribunal de Justi√ßa
"""


async def test_enhanced_parser():
    """Testa o parser aprimorado com conte√∫do de exemplo"""

    print("üß™ Teste do Parser Aprimorado")
    print("=" * 50)
    print("üìã Testando extra√ß√£o baseada em padr√µes RPV/INSS")
    print("üéØ Padr√£o de autores: '- NOME_DO_AUTOR - Vistos'")
    print()

    # Criar parser aprimorado
    parser = EnhancedDJEContentParser()

    try:
        # Testar extra√ß√£o aprimorada
        publications = await parser.parse_multiple_publications_enhanced(
            SAMPLE_REPORT_CONTENT, "test_report.pdf", current_page_number=3710
        )

        print(f"üìä RESULTADOS:")
        print(f"   üìÑ Publica√ß√µes encontradas: {len(publications)}")
        print()

        for i, pub in enumerate(publications, 1):
            print(f"üìÑ PUBLICA√á√ÉO {i}:")
            print(f"   üìã Processo: {pub.process_number}")
            print(f"   üë§ Autores: {', '.join(pub.authors)}")
            print(f"   ‚öñÔ∏è Advogados: {len(pub.lawyers)} advogado(s)")
            if pub.lawyers:
                for lawyer in pub.lawyers:
                    print(f"      - {lawyer.name} (OAB {lawyer.oab})")
            print(
                f"   üí∞ Valor Bruto: {pub.gross_value.to_real() if pub.gross_value else 'N/A'}"
            )
            print(
                f"   üí∞ Honor√°rios: {pub.attorney_fees.to_real() if pub.attorney_fees else 'N/A'}"
            )
            print(
                f"   üîç M√©todo: {pub.extraction_metadata.get('extraction_method', 'N/A')}"
            )
            print(
                f"   üìç Tipo Match: {pub.extraction_metadata.get('match_type', 'N/A')}"
            )
            print()

        # Verificar se encontrou os casos esperados
        expected_processes = ["0013168-70.2024.8.26.0053", "0017901-21.2020.8.26.0053"]
        found_processes = [pub.process_number for pub in publications]

        print("‚úÖ VERIFICA√á√ïES:")
        for expected in expected_processes:
            if expected in found_processes:
                print(f"   ‚úÖ Processo {expected} encontrado")
            else:
                print(f"   ‚ùå Processo {expected} N√ÉO encontrado")
                alert_edge_case(f"Processo esperado {expected} n√£o foi extra√≠do")

        # Verificar se o processo sem RPV/INSS foi ignorado
        ignored_process = "0025432-15.2023.8.26.0053"
        if ignored_process not in found_processes:
            print(
                f"   ‚úÖ Processo {ignored_process} corretamente ignorado (sem RPV/INSS)"
            )
        else:
            print(f"   ‚ö†Ô∏è Processo {ignored_process} foi extra√≠do mesmo sem RPV/INSS")
            alert_edge_case(f"Processo {ignored_process} foi extra√≠do sem ter RPV/INSS")

        return len(publications) > 0

    except Exception as error:
        print(f"‚ùå Erro durante teste: {error}")
        alert_edge_case(f"Erro durante teste do parser aprimorado: {error}")
        import traceback

        traceback.print_exc()
        return False


async def test_edge_cases():
    """Testa casos extremos e edge cases"""

    print("\nüö® Teste de Edge Cases")
    print("=" * 30)

    parser = EnhancedDJEContentParser()

    # Caso 1: RPV no in√≠cio do documento sem "Processo" anterior
    edge_case_1 = """
    RPV contra INSS no valor de R$ 10.000,00
    - AUTOR SEM PROCESSO - Vistos
    Sem n√∫mero de processo identific√°vel.
    """

    print("üß™ Caso 1: RPV sem processo anterior")
    try:
        pubs = await parser.parse_multiple_publications_enhanced(
            edge_case_1, "edge1.pdf"
        )
        if not pubs:
            print("   ‚úÖ Corretamente ignorado (sem processo)")
        else:
            print("   ‚ö†Ô∏è Extra√≠do mesmo sem processo v√°lido")
            alert_edge_case("RPV extra√≠do sem n√∫mero de processo v√°lido")
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")
        alert_edge_case(f"Erro no edge case 1: {e}")

    # Caso 2: M√∫ltiplas ocorr√™ncias RPV no mesmo processo
    edge_case_2 = """
    Processo 0012345-67.2024.8.26.0001
    - AUTOR M√öLTIPLO - Vistos
    Primeira men√ß√£o a RPV aqui.
    Segunda men√ß√£o a RPV tamb√©m.
    Terceira men√ß√£o sobre pagamento pelo INSS.
    """

    print("üß™ Caso 2: M√∫ltiplas ocorr√™ncias no mesmo processo")
    try:
        pubs = await parser.parse_multiple_publications_enhanced(
            edge_case_2, "edge2.pdf"
        )
        if len(pubs) == 1:
            print("   ‚úÖ Corretamente extra√≠do como uma publica√ß√£o")
        elif len(pubs) > 1:
            print(f"   ‚ö†Ô∏è Extra√≠do como {len(pubs)} publica√ß√µes (duplica√ß√£o)")
            alert_edge_case(
                f"Processo duplicado {len(pubs)} vezes por m√∫ltiplas ocorr√™ncias RPV/INSS"
            )
        else:
            print("   ‚ùå N√£o extra√≠do")
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")
        alert_edge_case(f"Erro no edge case 2: {e}")

    # Caso 3: Autor com caracteres especiais
    edge_case_3 = """
    Processo 0098765-43.2024.8.26.0002
    - JOS√â DA SILVA-SANTOS (MENOR) - Vistos
    Execu√ß√£o de RPV com nome complexo.
    """

    print("üß™ Caso 3: Nome com caracteres especiais")
    try:
        pubs = await parser.parse_multiple_publications_enhanced(
            edge_case_3, "edge3.pdf"
        )
        if pubs and pubs[0].authors:
            author_name = pubs[0].authors[0]
            print(f"   ‚úÖ Autor extra√≠do: '{author_name}'")
            if "jos√©" in author_name.lower() and "silva" in author_name.lower():
                print("   ‚úÖ Nome corretamente processado")
            else:
                alert_edge_case(
                    f"Nome do autor pode ter sido mal processado: '{author_name}'"
                )
        else:
            print("   ‚ùå Autor n√£o extra√≠do")
            alert_edge_case("Autor com caracteres especiais n√£o foi extra√≠do")
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")
        alert_edge_case(f"Erro no edge case 3: {e}")


if __name__ == "__main__":
    print("üöÄ Teste do Parser Aprimorado para Extra√ß√£o de Autores")
    print("üí° Seguindo instru√ß√µes espec√≠ficas para padr√£o RPV/INSS")
    print()

    # Executar teste principal
    success = asyncio.run(test_enhanced_parser())

    # Executar testes de edge cases
    asyncio.run(test_edge_cases())

    if success:
        print("\nüéâ TESTE PRINCIPAL PASSOU!")
        print("‚úÖ Parser aprimorado funcionando conforme especificado")
    else:
        print("\n‚ö†Ô∏è TESTE PRINCIPAL FALHOU")
        print("‚ùå Verificar implementa√ß√£o do parser aprimorado")

    print("\nüìã Instru√ß√µes implementadas:")
    print("   1. ‚úÖ Busca por 'RPV' ou 'pagamento pelo INSS'")
    print("   2. ‚úÖ Localiza 'Processo NUMERO_DO_PROCESSO'")
    print("   3. ‚úÖ Determina fim do processo")
    print("   4. ‚ö†Ô∏è Download de p√°gina anterior (parcialmente implementado)")
    print("   5. ‚úÖ Extrai autores no padr√£o '- NOME - Vistos'")
    print("   6. ‚úÖ Alertas para edge cases")

    sys.exit(0 if success else 1)
