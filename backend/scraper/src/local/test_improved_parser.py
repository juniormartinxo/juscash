#!/usr/bin/env python3
"""
Script de teste para validar as melhorias implementadas no parser DJE-SP
"""

import sys
import os

# Adicionar o diret√≥rio pai (src) ao path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


# Mock das depend√™ncias que podem n√£o estar dispon√≠veis
class MockPublication:
    def __init__(self, **kwargs):
        for key, value in kwargs.items():
            setattr(self, key, value)


class MockLawyer:
    def __init__(self, name, oab):
        self.name = name
        self.oab = oab


class MockMonetaryValue:
    def __init__(self, value):
        self.value = value

    @classmethod
    def from_real(cls, value):
        return cls(value)


# Mock do logger
class MockLogger:
    def debug(self, msg):
        print(f"DEBUG: {msg}")

    def info(self, msg):
        print(f"INFO: {msg}")

    def warning(self, msg):
        print(f"WARNING: {msg}")

    def error(self, msg):
        print(f"ERROR: {msg}")


# Substituir as importa√ß√µes
sys.modules["domain.entities.publication"] = type(
    "MockModule",
    (),
    {
        "Publication": MockPublication,
        "Lawyer": MockLawyer,
        "MonetaryValue": MockMonetaryValue,
    },
)()

sys.modules["infrastructure.logging.logger"] = type(
    "MockModule", (), {"setup_logger": lambda name: MockLogger()}
)()

# Agora importar o parser
from infrastructure.web.content_parser import DJEContentParser

# Conte√∫do de teste baseado no PDF processado
test_content = """
Di√°rio Oficial eletr√¥nico - quarta-feira, 13 de novembro de 2024

Di√°rio da Justi√ßa Eletr√¥nica - Caderno Judicial - Presidente - Capital (Proc.) | S√£o Paulo, Ano XVII, Edi√ß√£o 4902

3714 TJ - Tribunal de Justi√ßa do Estado de S√£o Paulo

Processo 0017752-90.2019.8.26.0053 ) Procedimento Comum (Proc. Exec.) - Sa√∫de - Claudio Luiz Bueno de Miranda - INSTITUTO NACIONAL DO SEGURO SOCIAL - INSS - Mar√≠lia Rezende de Oliveira - Cl√°udia Luiz relacionados aos valores de precat√≥rio dever√° ser feito no incidente e n√£o ser√£o avaliados neste autor. Int. - ADV. BRUNO MOREIRA COSTA (OAB 316779/SP), SERGIO ROBERTO MUNANO DA SILVA (OAB 196791/SP), ANDREA VENEZI.AN DE CARVALHO (OAB 162791/SP), ROBERTA NEVES MUNANO DA SILVA (OAB 516179/SP), JOANA LAZO CARINHEIRO (OAB 183475/SP).

Processo 0031736-13.2018.8.26.0053 (processo principal 1007966-40.2018.8.26.0053) - Cumprimento de Senten√ßa contra a Fazenda P√∫blica - Aux√≠lio-Doen√ßa Acident√°rio - Mirian Rezende de Oliveira - Implanta√ß√£o do benef√≠cio comprometida pois nossa defesa n√£o foi bem sucedida; JOS√â MARIA SANTOS (OAB 104052/SP), ROSANA BORGES MACHADO (OAB 298775/SP).

Processo 0031740-53.2018.8.26.0053 (processo principal 1014791-15.2014.8.26.0053) - Cumprimento de Senten√ßa contra a Fazenda P√∫blica - Aux√≠lio-Doen√ßa Acident√°rio - Bruno Moreira Costa - Jos√© Maria Santos - INSTITUTO NACIONAL DO SEGURO SOCIAL - INSS - Int. - ADV. CLAUDIA MARIA BARRETO - WALDYR GRISARD FILHO - WALDEIR GRISARD NETO - Inadmiss√≠vel Laboratoria Permanente - Edison da Silva Guerra - Vistoria II Homologa√ß√£o das cl√°usulas aprovadas do cadastro pela expedi√ß√£o da senten√ßa em 23/05/22 2021. R$ 43.545,51 - juros monet√°rios, R$ 11.578,51 - honor√°rios advocat√≠cios. Os valores devem ser atualizados na data do efetivo pagamento das s√©ries recursal (data da disponibiliza√ß√£o do ac√≥rd√£o).

Publica√ß√£o Oficial do Tribunal de Justi√ßa do Estado de S√£o Paulo - Lei Federal n¬∞ 11.419/06, art. 4¬∞.
"""


def test_parser():
    """Testa as funcionalidades do parser aprimorado"""
    print("üîç Testando parser DJE-SP aprimorado...")

    parser = DJEContentParser()

    # Teste 1: Processamento de m√∫ltiplas publica√ß√µes
    print("\nüìã Teste 1: Processamento de m√∫ltiplas publica√ß√µes")
    publications = parser.parse_multiple_publications(test_content)
    print(f"   Publica√ß√µes encontradas: {len(publications)}")

    # Teste 2: Valida√ß√£o de cada publica√ß√£o
    print("\nüìã Teste 2: Valida√ß√£o de publica√ß√µes individuais")
    for i, pub in enumerate(publications, 1):
        print(f"\n   Publica√ß√£o {i}:")
        print(f"   - N√∫mero do processo: {pub.process_number}")
        print(f"   - Data de publica√ß√£o: {pub.publication_date}")
        print(f"   - Autores: {pub.authors}")
        print(
            f"   - Advogados: {[f'{l.name} (OAB {l.oab})' for l in pub.lawyers] if pub.lawyers else 'Nenhum'}"
        )

        # Verificar valores monet√°rios
        values = []
        if pub.gross_value:
            values.append(f"Valor bruto: R$ {pub.gross_value.value}")
        if pub.interest_value:
            values.append(f"Juros: R$ {pub.interest_value.value}")
        if pub.attorney_fees:
            values.append(f"Honor√°rios: R$ {pub.attorney_fees.value}")

        if values:
            print(f"   - Valores: {', '.join(values)}")
        else:
            print(f"   - Valores: N√£o identificados")

    # Teste 3: Teste de padr√µes espec√≠ficos
    print("\nüìã Teste 3: Teste de padr√µes espec√≠ficos")

    # Teste extra√ß√£o de data por extenso
    date = parser._extract_publication_date(test_content)
    print(f"   - Data extra√≠da: {date}")

    # Teste detec√ß√£o INSS
    is_inss = parser._is_inss_related(test_content)
    print(f"   - Relacionado ao INSS: {is_inss}")

    print("\n‚úÖ Testes conclu√≠dos!")
    return publications


if __name__ == "__main__":
    publications = test_parser()

    print(f"\nüìä Resumo: {len(publications)} publica√ß√µes processadas com sucesso!")
