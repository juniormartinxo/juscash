"""
Teste espec√≠fico para a interface real do DJE
Baseado nas imagens fornecidas mostrando a estrutura real
"""

import asyncio
import sys
from pathlib import Path

# Adicionar src ao path
sys.path.insert(0, str(Path(__file__).parent.parent))

from infrastructure.web.content_parser import DJEContentParser
from infrastructure.logging.logger import setup_logger

logger = setup_logger(__name__)


def test_real_dje_content():
    """Testa parser com conte√∫do real das imagens do DJE"""

    # Conte√∫do real extra√≠do das imagens
    real_content_sample = """
    13/11/2024 - Caderno 3 - Judicial - 1¬™ Inst√¢ncia - Capital - Parte 1 - P√°gina 3710 üì± 1) conte√∫do encontrado nesta p√°gina!
    meta data: 2) Peticionamento eletr√¥nico do incidente processual: Nos termos da Comunica√ß√£o SPI n¬∫ 03/2014, procedido a parte autora a intima√ß√£o do
    incidente processual de requisi√ß√£o de pagamento (RPV ou Precat√≥rio) pelo sistema de peticionamento eletr√¥nico (portal e-SAJ). Os valores do requisit√≥rio
    dever√£o ser discriminados e individualizados de acordo com a natureza de cada parcela (principal ...
    
    Processo 0029547-86.2024.8.26.0053 - ADV: JOS√â BRUN JUNIOR (OAB 12836/SP) Processo ...
    
    CONCLUS√ÉO. - ADV: JOS√â BRUN JUNIOR (OAB 12836/SP)
    Processo 0029547-97.2024.8.26.0053 - Cumprimento de Senten√ßa contra a Fazenda P√∫blica - Aux√≠lio-Acidente (Art. 86) - Josuel Anderson de Oliveira - Vistos. 1) Homologa√ß√£o dos c√°lculos: Com a concord√¢ncia da parte contr√°ria (fls. 35), homologo os c√°lculos apresentados (fls. 29/31) e atualizado para 10/2024 (data-base), que correspondem ao importe total de R$ 13.210,54, composto pelas seguintes parcelas: R$ 11.608,32 - principal bruto/l√≠quido, R$ 835,67 - honor√°rios advocat√≠cios. Os valores devem ser atualizados pela SELIC at√© a data do efetivo pagamento pelo INSS. Ausente o interesse recursal, d√™-se o tr√¢nsito em julgado deste item nesta data. 2) Peticionamento eletr√¥nico do incidente processual: Nos termos da Comunica√ß√£o SPI n¬∫ 03/2014, procedindo a parte autora a intima√ß√£o do incidente processual de requisi√ß√£o de pagamento (RPV ou Precat√≥rio) pelo sistema de peticionamento eletr√¥nico (portal e-SAJ). Os valores do requisit√≥rio dever√£o ser discriminados e individualizados de acordo com a natureza de cada parcela (principal, juros de mora, honor√°rios advocat√≠cios), em conformidade estrita com a conta homologada e nos termos da presente decis√£o. Conforme o artigo 17 da Resolu√ß√£o n¬∫ 551/2011 do √ìrg√£o Especial do E. TJSP e do ¬ß 1¬∫ art. 1¬∫, SEJP da Lei n¬∫ 20.555/30, para a instru√ß√£o e confer√™ncia do incidente processual, o(a) requerente dever√° apresentar sua peti√ß√£o de requerimento com c√≥pia dos seguintes documentos: a) certid√£o da homologa√ß√£o emitida pelo(a) diretor(a) secret√°rio para a expedi√ß√£o do of√≠cio requisit√≥rio, devidamente organizada e categorizada por documentos pessoais, do(a) requerente (RG e CPF), procura√ß√£o e substabelecimento(s) outorgado(s) ao longo do presente feito do(a) advogado(a) para saque conforme estabelecido; c) c√≥pia certid√£o da comarca para qualidade de representa√ß√£o de quest√µes demandas; d(as) exequente lugar necess√°rio; c) c√≥pia do cr√©dito do(a) advogado(a): A conta dos mandados dos requerentes de pedido de dos autores; e dados da conta banc√°ria, benefici√°rio(a); mem√≥ria(s) dos valores devido e as senten√ßas estabelecidas, demais pe√ßas que o(a) exequente lugar necess√°rio e conta da presente: com certid√£o; A conta dos requerentes de pedido de dos autores; √© necess√°rio e se for da conta completa que constam como benefici√°rio(a): mem√≥ria(s) dos valores devido e as senten√ßas estabelecidas.
    """

    logger.info("üß™ Testando parser com conte√∫do real do DJE")

    parser = DJEContentParser()

    # Testar extra√ß√£o de n√∫mero do processo
    process_number = parser._extract_process_number(real_content_sample)
    logger.info(f"üìã N√∫mero do processo extra√≠do: {process_number}")

    # Testar extra√ß√£o de autores
    authors = parser._extract_authors(real_content_sample)
    logger.info(f"üë• Autores extra√≠dos: {authors}")

    # Testar extra√ß√£o de advogados
    lawyers = parser._extract_lawyers(real_content_sample)
    logger.info(f"‚öñÔ∏è  Advogados extra√≠dos: {lawyers}")

    # Testar extra√ß√£o de valores monet√°rios
    monetary_values = parser._extract_all_monetary_values(real_content_sample)
    logger.info("üí∞ Valores monet√°rios:")
    for value_type, value in monetary_values.items():
        if value:
            logger.info(f"   {value_type}: R$ {value.to_real()}")

    # Testar parsing completo
    publication = parser.parse_publication(
        real_content_sample, "https://dje.tjsp.jus.br/test"
    )

    if publication:
        logger.info("‚úÖ Publica√ß√£o parseada com sucesso:")
        logger.info(f"   üìã Processo: {publication.process_number}")
        logger.info(f"   üë• Autores: {publication.authors}")
        logger.info(f"   ‚öñÔ∏è  Advogados: {len(publication.lawyers)}")
        logger.info(
            f"   üí∞ Valor bruto: R$ {publication.gross_value.to_real() if publication.gross_value else 'N/A'}"
        )
        logger.info(
            f"   üéØ Confian√ßa: {publication.extraction_metadata.get('confidence_score', 'N/A')}"
        )

        # Converter para formato da API
        api_data = publication.to_api_dict()
        logger.info("üì§ Dados para API:")
        logger.info(f"   process_number: {api_data['process_number']}")
        logger.info(f"   authors: {api_data['authors']}")
        logger.info(f"   gross_value: {api_data['gross_value']} centavos")

        return True
    else:
        logger.error("‚ùå Falha ao parsear publica√ß√£o")
        return False


async def test_dje_navigation_simulation():
    """Simula navega√ß√£o no DJE baseada na interface real"""

    logger.info("üåê Simulando navega√ß√£o na interface real do DJE")

    # Simular passos de navega√ß√£o baseados nas imagens
    navigation_steps = [
        "1. Acessar https://dje.tjsp.jus.br/cdje/index.do",
        "2. Clicar em 'Pesquisa avan√ßada'",
        "3. Selecionar 'Caderno 3 - Judicial - 1¬™ Inst√¢ncia - Capital - Parte 1'",
        "4. Inserir palavras-chave: 'aposentadoria benef√≠cio INSS'",
        "5. Clicar em 'Pesquisar'",
        "6. Processar resultados da pesquisa",
    ]

    for i, step in enumerate(navigation_steps, 1):
        logger.info(f"üîÑ Passo {i}: {step}")
        await asyncio.sleep(1)  # Simular tempo de execu√ß√£o

    logger.info("‚úÖ Simula√ß√£o de navega√ß√£o conclu√≠da")


def test_data_validation():
    """Testa valida√ß√£o com dados baseados na estrutura real"""

    logger.info("üîç Testando valida√ß√£o de dados reais")

    # Dados extra√≠dos das imagens
    test_cases = [
        {
            "process_number": "0029547-86.2024.8.26.0053",
            "expected_valid": True,
            "description": "N√∫mero real das imagens",
        },
        {
            "process_number": "0029547-97.2024.8.26.0053",
            "expected_valid": True,
            "description": "Outro n√∫mero real das imagens",
        },
        {
            "lawyer_text": "ADV: JOS√â BRUN JUNIOR (OAB 12836/SP)",
            "expected_name": "JOS√â BRUN JUNIOR",
            "expected_oab": "12836",
            "description": "Advogado real das imagens",
        },
        {
            "monetary_text": "R$ 11.608,32 - principal bruto/l√≠quido",
            "expected_value": 11608.32,
            "description": "Valor principal das imagens",
        },
        {
            "monetary_text": "R$ 835,67 - honor√°rios advocat√≠cios",
            "expected_value": 835.67,
            "description": "Honor√°rios das imagens",
        },
    ]

    parser = DJEContentParser()

    # Testar n√∫meros de processo
    for case in test_cases:
        if "process_number" in case:
            is_valid = parser._validate_process_number_format(case["process_number"])
            status = "‚úÖ" if is_valid == case["expected_valid"] else "‚ùå"
            logger.info(
                f"{status} {case['description']}: {case['process_number']} -> {is_valid}"
            )

    # Testar extra√ß√£o de advogados
    for case in test_cases:
        if "lawyer_text" in case:
            lawyers = parser._extract_lawyers(case["lawyer_text"])
            if lawyers:
                lawyer = lawyers[0]
                name_ok = case["expected_name"] in lawyer.name
                oab_ok = case["expected_oab"] in lawyer.oab
                status = "‚úÖ" if name_ok and oab_ok else "‚ùå"
                logger.info(
                    f"{status} {case['description']}: {lawyer.name} (OAB: {lawyer.oab})"
                )

    # Testar valores monet√°rios
    for case in test_cases:
        if "monetary_text" in case:
            values = parser._extract_all_monetary_values(case["monetary_text"])
            found_value = None
            for value in values.values():
                if (
                    value
                    and abs(float(value.to_real()) - case["expected_value"]) < 0.01
                ):
                    found_value = value
                    break

            status = "‚úÖ" if found_value else "‚ùå"
            logger.info(
                f"{status} {case['description']}: R$ {found_value.to_real() if found_value else 'N/A'}"
            )


def main():
    """Fun√ß√£o principal do teste"""
    logger.info("üöÄ Iniciando testes com interface real do DJE")
    logger.info("=" * 50)

    # Teste 1: Parser com conte√∫do real
    logger.info("\nüìÑ Teste 1: Parser com conte√∫do real")
    success1 = test_real_dje_content()

    # Teste 2: Valida√ß√£o de dados
    logger.info("\nüîç Teste 2: Valida√ß√£o de dados")
    test_data_validation()

    # Teste 3: Simula√ß√£o de navega√ß√£o
    logger.info("\nüåê Teste 3: Simula√ß√£o de navega√ß√£o")
    asyncio.run(test_dje_navigation_simulation())

    # Resumo
    logger.info("\nüìä Resumo dos Testes")
    logger.info("=" * 50)

    if success1:
        logger.info("‚úÖ Todos os testes passaram!")
        logger.info("üéØ O parser est√° otimizado para a interface real do DJE")
        logger.info("üìã Pronto para extrair dados das publica√ß√µes reais")
    else:
        logger.error("‚ùå Alguns testes falharam")
        logger.info("üîß Verifique os padr√µes de parsing")

    return success1


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
