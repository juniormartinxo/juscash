#!/usr/bin/env python3
"""
üöÄ TESTE PR√ÅTICO - CEN√ÅRIO REAL FASE 2

Teste simulando um cen√°rio real de scraping com:
1. Download de m√∫ltiplas p√°ginas
2. Cache funcionando
3. Merge de publica√ß√µes divididas
4. Valida√ß√£o de qualidade
5. M√©tricas de performance
"""

import asyncio
import sys
from pathlib import Path
from unittest.mock import Mock, AsyncMock
from datetime import datetime

# Adicionar src ao path
sys.path.append(str(Path(__file__).parent.parent.parent / "src"))

from infrastructure.web.page_manager import DJEPageManager, PublicationContentMerger
from infrastructure.logging.logger import setup_logger

logger = setup_logger(__name__)


class MockScraperAdapter:
    """Mock realista do scraper adapter para testes"""

    def __init__(self):
        self.browser = Mock()
        self.setup_browser_mock()

    def setup_browser_mock(self):
        """Configura mock do browser com dados realistas"""
        # Simular respostas de diferentes p√°ginas
        self.page_contents = {
            3709: """
            <html><body>
            <div class="content">
            Processo 1234567-89.2024.8.26.0001 - Cumprimento de Senten√ßa contra a Fazenda P√∫blica
            - JO√ÉO DA SILVA SANTOS - Vistos. O requerente solicita
            </div>
            </body></html>
            """,
            3710: """
            <html><body>
            <div class="content">
            RPV para pagamento pelo INSS do valor de R$ 5.450,30 referente a benef√≠cio previdenci√°rio atrasado. 
            Considerando a documenta√ß√£o apresentada e o valor dentro do limite legal, DEFIRO o pedido de expedi√ß√£o 
            de Requisi√ß√£o de Pequeno Valor. ADV. MARIA OLIVEIRA COSTA (OAB 123456/SP). 
            Valor principal: R$ 5.450,30. Juros morat√≥rios: R$ 150,20. Honor√°rios advocat√≠cios: R$ 545,03. 
            Valor l√≠quido: R$ 5.055,07. Intimem-se. S√£o Paulo, 17 de mar√ßo de 2025.
            
            Processo 7654321-12.2024.8.26.0002 - Mandado de Seguran√ßa
            - PEDRO SOUZA ALMEIDA - Vistos. Trata-se de mandado de seguran√ßa...
            </div>
            </body></html>
            """,
        }

        # Mock das fun√ß√µes do browser
        async def mock_new_page():
            page_mock = AsyncMock()
            page_mock.goto = AsyncMock()
            page_mock.content = AsyncMock()
            page_mock.close = AsyncMock()
            page_mock.set_default_timeout = Mock()
            page_mock.wait_for_load_state = AsyncMock()

            # Simular conte√∫do baseado na URL
            async def mock_content():
                # Extrair n√∫mero da p√°gina da URL atual
                current_url = getattr(page_mock, "_current_url", "")
                for page_num, content in self.page_contents.items():
                    if f"nuSeqpagina={page_num}" in current_url:
                        return content
                return "<html><body>P√°gina n√£o encontrada</body></html>"

            async def mock_goto(url, **kwargs):
                page_mock._current_url = url
                logger.info(f"üåê Mock navegando para: {url}")

            page_mock.content.side_effect = mock_content
            page_mock.goto.side_effect = mock_goto

            return page_mock

        self.browser.new_page = mock_new_page


async def test_page_manager_basic_functionality():
    """Teste b√°sico do Page Manager"""
    print("\nüß™ === TESTE 1: FUNCIONALIDADE B√ÅSICA DO PAGE MANAGER ===")

    # Setup
    mock_adapter = MockScraperAdapter()
    page_manager = DJEPageManager(mock_adapter)

    # Teste 1: Cache inicial vazio
    stats = page_manager.get_cache_stats()
    print(f"üìä Cache inicial: {stats}")
    assert stats["cache_size"] == 0
    assert stats["hit_rate_percent"] == 0

    # Teste 2: Primeira requisi√ß√£o (cache miss)
    current_url = "https://esaj.tjsp.jus.br/cdje/consultaSimples.do?cdVolume=19&nuDiario=4092&cdCaderno=12&nuSeqpagina=3710"
    previous_content = await page_manager.get_previous_page_content(current_url, 3710)

    print(
        f"üìÑ Conte√∫do obtido: {len(previous_content) if previous_content else 0} chars"
    )
    print(
        f"üîç Cont√©m processo? {'Sim' if previous_content and 'Processo' in previous_content else 'N√£o'}"
    )

    # Verificar cache ap√≥s primeira requisi√ß√£o
    stats = page_manager.get_cache_stats()
    print(f"üìä Cache ap√≥s 1¬™ requisi√ß√£o: {stats}")

    # Teste 3: Segunda requisi√ß√£o da mesma p√°gina (cache hit)
    previous_content_2 = await page_manager.get_previous_page_content(current_url, 3710)

    # Verificar cache hit
    stats = page_manager.get_cache_stats()
    print(f"üìä Cache ap√≥s 2¬™ requisi√ß√£o: {stats}")
    assert stats["hits"] == 1
    assert stats["cache_size"] == 1

    print("‚úÖ Teste 1 conclu√≠do com sucesso!")
    return page_manager


async def test_content_merger_functionality():
    """Teste do Content Merger"""
    print("\nüß™ === TESTE 2: FUNCIONALIDADE DO CONTENT MERGER ===")

    # Setup
    merger = PublicationContentMerger()

    # Dados de teste simulando publica√ß√£o dividida
    previous_page_content = """
    Processo 1234567-89.2024.8.26.0001 - Cumprimento de Senten√ßa contra a Fazenda P√∫blica
    - JO√ÉO DA SILVA SANTOS - Vistos. O requerente solicita
    """

    current_page_content = """
    RPV para pagamento pelo INSS do valor de R$ 5.450,30 referente a benef√≠cio previdenci√°rio atrasado. 
    Considerando a documenta√ß√£o apresentada e o valor dentro do limite legal, DEFIRO o pedido de expedi√ß√£o 
    de Requisi√ß√£o de Pequeno Valor. ADV. MARIA OLIVEIRA COSTA (OAB 123456/SP). 
    Valor principal: R$ 5.450,30. Juros morat√≥rios: R$ 150,20. Honor√°rios advocat√≠cios: R$ 545,03. 
    Valor l√≠quido: R$ 5.055,07. Intimem-se. S√£o Paulo, 17 de mar√ßo de 2025.
    
    Processo 7654321-12.2024.8.26.0002 - Mandado de Seguran√ßa
    - PEDRO SOUZA ALMEIDA - Vistos. Trata-se de mandado de seguran√ßa...
    """

    # Teste 1: Merge de conte√∫do
    merged_content = merger.merge_cross_page_publication(
        previous_page_content, current_page_content, 0
    )

    print(f"üìÑ Tamanho do merge: {len(merged_content)} chars")
    print(
        f"üîç Cont√©m processo original? {'Sim' if '1234567-89.2024.8.26.0001' in merged_content else 'N√£o'}"
    )
    print(f"üîç Cont√©m RPV? {'Sim' if 'RPV' in merged_content else 'N√£o'}")
    print(f"üîç Cont√©m INSS? {'Sim' if 'INSS' in merged_content else 'N√£o'}")
    print(
        f"üîç Cont√©m 2¬∫ processo? {'N√£o' if '7654321-12.2024.8.26.0002' not in merged_content else 'Sim - ERRO!'}"
    )

    # Teste 2: Valida√ß√£o de qualidade
    is_valid = merger.validate_merged_content(merged_content, ["RPV", "INSS"])
    quality_score = merger._calculate_content_quality(merged_content)

    print(f"‚úÖ Merge v√°lido? {is_valid}")
    print(f"üìä Score de qualidade: {quality_score:.2f}")

    # Teste 3: Estat√≠sticas
    stats = merger.get_merge_statistics()
    print(f"üìä Estat√≠sticas do merger: {stats}")

    print("‚úÖ Teste 2 conclu√≠do com sucesso!")
    return merger, merged_content


async def test_integrated_workflow():
    """Teste do workflow integrado completo"""
    print("\nüß™ === TESTE 3: WORKFLOW INTEGRADO COMPLETO ===")

    # Setup
    mock_adapter = MockScraperAdapter()
    page_manager = DJEPageManager(mock_adapter)
    content_merger = PublicationContentMerger()

    # Simular cen√°rio: encontrou RPV na p√°gina 3710, mas in√≠cio est√° na p√°gina 3709
    current_url = "https://esaj.tjsp.jus.br/cdje/consultaSimples.do?cdVolume=19&nuDiario=4092&cdCaderno=12&nuSeqpagina=3710"
    current_page_number = 3710

    print(f"üéØ Cen√°rio: RPV encontrado na p√°gina {current_page_number}")
    print(f"üîó URL atual: {current_url}")

    # Passo 1: Obter p√°gina anterior
    print("\nüì• Passo 1: Obtendo p√°gina anterior...")
    previous_content = await page_manager.get_previous_page_content(
        current_url, current_page_number
    )

    if previous_content:
        print(f"‚úÖ P√°gina anterior obtida: {len(previous_content)} chars")

        # Passo 2: Simular conte√∫do da p√°gina atual
        print("\nüîÑ Passo 2: Simulando merge...")
        current_content = """
        RPV para pagamento pelo INSS do valor de R$ 5.450,30 referente a benef√≠cio previdenci√°rio atrasado. 
        Considerando a documenta√ß√£o apresentada e o valor dentro do limite legal, DEFIRO o pedido.
        ADV. MARIA OLIVEIRA COSTA (OAB 123456/SP). Valor l√≠quido: R$ 5.055,07.
        
        Processo 7654321-12.2024.8.26.0002 - Pr√≥ximo processo
        """

        # Passo 3: Fazer merge
        merged_content = content_merger.merge_cross_page_publication(
            previous_content, current_content, 0
        )

        # Passo 4: Validar resultado
        is_valid = content_merger.validate_merged_content(
            merged_content, ["RPV", "INSS"]
        )
        quality_score = content_merger._calculate_content_quality(merged_content)

        print(f"‚úÖ Merge realizado: {len(merged_content)} chars")
        print(f"üìä Qualidade: {quality_score:.2f}")
        print(f"‚úÖ V√°lido: {is_valid}")

        # Passo 5: M√©tricas finais
        cache_stats = page_manager.get_cache_stats()

        print(f"\nüìä === M√âTRICAS FINAIS ===")
        print(f"üéØ Cache hit rate: {cache_stats['hit_rate_percent']:.1f}%")
        print(f"üì• Downloads realizados: {cache_stats['downloads_made']}")
        print(f"üíæ P√°ginas em cache: {cache_stats['cache_size']}")
        print(f"üîÑ Merge bem-sucedido: {'Sim' if is_valid else 'N√£o'}")
        print(f"‚≠ê Score de qualidade: {quality_score:.2f}/1.00")

        # Calcular economia de downloads
        total_requests = cache_stats["hits"] + cache_stats["misses"]
        if total_requests > 0:
            economia_downloads = (cache_stats["hits"] / total_requests) * 100
            print(f"üí∞ Economia de downloads: {economia_downloads:.1f}%")

        print("‚úÖ Teste 3 conclu√≠do com sucesso!")

        return {
            "cache_stats": cache_stats,
            "merge_quality": quality_score,
            "merge_valid": is_valid,
            "content_size": len(merged_content),
        }
    else:
        print("‚ùå Falha ao obter p√°gina anterior")
        return None


async def test_performance_scenarios():
    """Teste de cen√°rios de performance"""
    print("\nüß™ === TESTE 4: CEN√ÅRIOS DE PERFORMANCE ===")

    mock_adapter = MockScraperAdapter()
    page_manager = DJEPageManager(mock_adapter)

    # Simular m√∫ltiplas requisi√ß√µes para testar cache
    base_url = "https://esaj.tjsp.jus.br/cdje/consultaSimples.do?cdVolume=19&nuDiario=4092&cdCaderno=12&nuSeqpagina="

    start_time = datetime.now()

    # Requisi√ß√µes que v√£o testar cache
    test_pages = [3710, 3710, 3709, 3710, 3709, 3708, 3709]  # Repeti√ß√µes intencionais

    for i, page_num in enumerate(test_pages):
        url = f"{base_url}{page_num}"
        print(f"üì• Requisi√ß√£o {i + 1}: P√°gina {page_num}")

        content = await page_manager.get_previous_page_content(url, page_num)

        # Mostrar status do cache
        stats = page_manager.get_cache_stats()
        print(
            f"   üìä Cache: {stats['hits']} hits, {stats['misses']} misses, hit rate: {stats['hit_rate_percent']:.1f}%"
        )

    end_time = datetime.now()
    duration = (end_time - start_time).total_seconds()

    # Estat√≠sticas finais
    final_stats = page_manager.get_cache_stats()

    print(f"\nüìä === RESULTADOS DE PERFORMANCE ===")
    print(f"‚è±Ô∏è  Tempo total: {duration:.2f}s")
    print(f"üì• Total de requisi√ß√µes: {len(test_pages)}")
    print(f"‚úÖ Cache hits: {final_stats['hits']}")
    print(f"‚ùå Cache misses: {final_stats['misses']}")
    print(f"üìä Hit rate: {final_stats['hit_rate_percent']:.1f}%")
    print(f"üíæ P√°ginas √∫nicas em cache: {final_stats['cache_size']}")
    print(f"üìè Mem√≥ria cache: {final_stats['cache_memory_usage']} chars")

    # Validar efici√™ncia
    expected_hits = len(test_pages) - len(set(test_pages))  # Requisi√ß√µes duplicadas
    actual_efficiency = (final_stats["hits"] / len(test_pages)) * 100

    print(f"üéØ Efici√™ncia esperada: {(expected_hits / len(test_pages)) * 100:.1f}%")
    print(f"üéØ Efici√™ncia real: {actual_efficiency:.1f}%")

    print("‚úÖ Teste 4 conclu√≠do com sucesso!")

    return final_stats


async def main():
    """Fun√ß√£o principal que executa todos os testes"""
    print("üöÄ === INICIANDO TESTES PR√ÅTICOS - FASE 2 PAGE MANAGER ===")
    print(f"‚è∞ In√≠cio dos testes: {datetime.now().strftime('%H:%M:%S')}")

    try:
        # Executar todos os testes em sequ√™ncia
        page_manager = await test_page_manager_basic_functionality()
        merger, merged_content = await test_content_merger_functionality()
        workflow_result = await test_integrated_workflow()
        performance_stats = await test_performance_scenarios()

        # Resumo final
        print("\nüéâ === RESUMO FINAL DOS TESTES ===")
        print("‚úÖ Teste 1: Funcionalidade b√°sica do Page Manager")
        print("‚úÖ Teste 2: Funcionalidade do Content Merger")
        print("‚úÖ Teste 3: Workflow integrado completo")
        print("‚úÖ Teste 4: Cen√°rios de performance")

        if workflow_result:
            print(f"\nüìä M√©tricas principais:")
            print(
                f"   üéØ Cache hit rate: {workflow_result['cache_stats']['hit_rate_percent']:.1f}%"
            )
            print(
                f"   ‚≠ê Qualidade do merge: {workflow_result['merge_quality']:.2f}/1.00"
            )
            print(f"   ‚úÖ Merge v√°lido: {workflow_result['merge_valid']}")

        print(f"\nüèÅ Todos os testes conclu√≠dos com sucesso!")
        print(f"‚è∞ T√©rmino: {datetime.now().strftime('%H:%M:%S')}")

        return True

    except Exception as e:
        print(f"\n‚ùå Erro durante os testes: {e}")
        import traceback

        traceback.print_exc()
        return False


if __name__ == "__main__":
    # Executar testes
    success = asyncio.run(main())

    if success:
        print("\nüéØ === FASE 2 PAGE MANAGER TESTADA COM SUCESSO ===")
        exit(0)
    else:
        print("\nüí• === FALHA NOS TESTES ===")
        exit(1)
